//=====Copyright 2010 (c) Centric Retail Solution. All rights reserved.=======
// Packet   : FlexPoint
// Customer : Castorama
// Unit     : FTndRegCountSafeCA : Form FlexPoS TeNDeR REGister COUNT Safe
//            Registration count safe in Tender module.
//-----------------------------------------------------------------------------
// CVS    : $Header: /development/Castorama/Flexpoint/Src/Flexpoint201/Develop/FTndRegCountSafeCA.pas,v 1.9 2010/02/12 12:55:42 BEL\KDeconyn Exp $
// History:
// - Started from Castorama - Flexpoint 2.0 - FTndRegCountSafeCA - CVS revision 1.22
// Version           Modified By           Reason
// 2.0               PM (TCS)              R2011.2 - BDFR - Safetybox Traceability
// 2.1               SC. (TCS)             R2012.1--CAFR-suppression mention cheque kdo
// 2.2               TK   (TCS)            R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques
//=============================================================================

unit FTndRegCountSafeCA;

//*****************************************************************************

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  SfCommon, StdCtrls, Buttons, ComCtrls, ExtCtrls, OvcBase, OvcEF, OvcPB,
  OvcPF, ScUtils, FVsRptTndCntSafeCA, DFpnSafeTransActionCA,
  DFpnSafeTransaction, DFpnTenderGroup, DFpnTenderGroupCA, DFpnTender,
  DFpnTenderCA, cxControls, cxContainer, cxEdit, cxTextEdit, cxMaskEdit,
  ScUtils_Dx,
  FMntTndCntSafeCA; // **** Added for Safetybox Traceability, PM (TCS), R2011.2, BDFR ****

//*****************************************************************************
// Global definitions
//*****************************************************************************

//=============================================================================
// Resourcestrings
//=============================================================================

resourcestring
  CtTxtStartedGiftCoup  = 'Quantity started pocketbooks gift coupons';
  CtTxtForeignCurrency  = 'Foreign currencies';
  CtTxtTransferKeysOK   = 'OK';
  CtTxtTransferKeysNOK  = 'NOK';
  CtTxtBagInvalidLength = 'Bagnumber should be 13 characters long';
  CtTxtNewTransactions  =   'New transactions found, please review!';
  CtTxtZeroAmount       = 'The given amount in the safe is zero' +
                          #13'Do you want to proceed?';
  CtTxtErrNegativeNotAllowed= 'Negative value is not allowed';
  CtTxtChecksBy = 'Checks by : '; // **** Added for Safetybox Traceability, PM (TCS), R2011.2, BDFR ****
  CtApplicationTitle    = 'Count Safe'; //***Added for Safetybox Traceability, PM (TCS), R2011.2, BDFR ****

//=============================================================================
// Width of at run time created components
//=============================================================================

var
  ViValWidthLbl    : Integer = 225;    // Width of labels
  ViValWidthVal    : Integer = 130;    // Width of component for value
  ViValWidthDescr  : Integer = 122;    // Width of component for description

// SVE to be removed
const
  IdtTGGiftCoup = 3;
  IdtTGMoneyCoup = 1;
  IdtTGCheques = 2;

const  // tendergroup to find pochettes for items
  CtIdtPochSuperKeys  = 100;
  CtIdtPochDrawerKeys = 101;
  CtIdtPochGifts      = 102;

const  // indicate that count and pay-in is generated by this application
  CtTxtCountCoffre = 'CodType: 131; IdtCheckout: 300';
  CtTxtPTndCntSafe   = '95';

//=============================================================================
// Left of at run time created components
//=============================================================================

var
  ViValLeftLbl     : Integer = 12;     // Left of label
  ViValLeftExtra   : Integer = 255;    // Left of Extra
  ViValLeftTheor   : Integer = 400;    // Left of Theor
  ViValLeftInvent  : Integer = 552;    // Left of Invent

//=============================================================================
// Name for components
//=============================================================================

var
  ViTxtPnlGiftCoupon    : string = 'PnlRegStartedGC';
  ViTxtPnlForeignCurr   : string = 'PnlRegForeignCurr';

//*****************************************************************************
// TFrmTndRegCountSafeCA
//*****************************************************************************

//=============================================================================
// TPnlTenderSafe : common parent panel to administer a TenderGroup or a
// TenderUnit.
//=============================================================================

type
  TPnlTenderSafe   = class (TPanel)
  protected
    FLblDescr      : TLabel;           // Description
    FSvcLFDescr    : TSvcLocalField;   // Extra description
    FSvcLFValTheor : TSvcLocalField;   // Theoretical value
    FSvcLFValInvent: TSvcLocalField;   // Inventory value
    FIdtSafeTrans  : Integer;          // Identification of the safetransaction
    FValTenderUnit : Currency;         // Value of the tenderunit
  public
    // Methods for components on the panel
    function CreateLblDescr (ValLeft    : Integer;
                             TxtCaption : string) : TLabel; virtual;
    function CreateSvcLFDescr (ValLeft : Integer) : TSvcLocalField; virtual;
    function CreateSvcLFVal (ValLeft : Integer) : TSvcLocalField; virtual;
    function CreateForTender (ValTop        : Integer;
                               ObjCntSafe    : TObjCntSafe;
                               IdtTrans      : Integer;
                               ValTndUnit    : Currency): String; virtual;
    procedure SvcLFKeyDown (    Sender : TObject;
                            var Key    : Word;
                                Shift  : TShiftState); virtual;
    // Properties
    property LblDescr : TLabel read FLblDescr
                               write FLblDescr;
    property SvcLFDescr : TSvcLocalField read FSvcLFDescr
                                         write FSvcLFDescr;
    property SvcLFValTheor : TSvcLocalField read FSvcLFValTheor
                                            write FSvcLFValTheor;
    property SvcLFValInvent : TSvcLocalField read FSvcLFValInvent
                                             write FSvcLFValInvent;
    property IdtSafeTrans : Integer read FIdtSafeTrans
                                    write FIdtSafeTrans;
    property ValTenderUnit : Currency read FValTenderUnit
                                      write FValTenderUnit;
  end;  // of TPnlTenderSafe

//=============================================================================

type
  TFrmTndRegCountSafeCA = class(TFrmCommon)
    StsBarInfo: TStatusBar;
    PnlBottom: TPanel;
    BtnAccept: TBitBtn;
    BtnCancel: TBitBtn;
    PnlRegCount: TPanel;
    PnlHeader: TPanel;
    SbxCntSafe: TScrollBox;
    PnlRegCountMoney: TPanel;
    LblInventVal: TLabel;
    LblTheorVal: TLabel;
    LblMoneyPresent: TLabel;
    SvcLFValMoneyPresTheor: TSvcLocalField;
    OvcCtrlDetail: TOvcController;
    SvcLFValMoneyPresInvent: TSvcLocalField;
    LblInitPayin: TLabel;
    SvcLFInitPayinTheor: TSvcLocalField;
    SvcLFInitPayinInvent: TSvcLocalField;
    SvcLFMoneySafeTheor: TSvcLocalField;
    LblCentralSafe: TLabel;
    SvcLFMoneySafeInvent: TSvcLocalField;
    SvcLFTotMoneySafeTheor: TSvcLocalField;
    SvcLFTotMoneySafeInvent: TSvcLocalField;
    LblTotalMoneySafe: TLabel;
    PnlRegCountBags: TPanel;
    LblCntBagsMoney: TLabel;
    LblCntBagsCheque: TLabel;
    SvcLFQtySldBagsMoneyInvent: TSvcLocalField;
    SvcLFQtySldBagsChequeInvent: TSvcLocalField;
    SvcLFQtySldBagsMoneyTheor: TSvcLocalField;
    SvcLFQtySldBagsChequeTheor: TSvcLocalField;
    PnlRegCollBagsMoney1: TPanel;
    LblCollBagsMoney1: TLabel;
    PnlRegCollBagsCheques1: TPanel;
    LblCollBagsCheques1: TLabel;
    PnlRegNumBagKeys: TPanel;
    SvcLFKeySupervisorTheor: TSvcLocalField;
    SvcLFKeySupervisorInvent: TSvcLocalField;
    SvcLFKeyDoubleDrawerInvent: TSvcLocalField;
    SvcLFKeyDoubleDrawerTheor: TSvcLocalField;
    LblKeySupervisor: TLabel;
    LblKeyDoubleDrawer: TLabel;
    PnlGiftCoupNotStarted: TPanel;
    LblGCBooksNotStarted: TLabel;
    PnlTransKeys: TPanel;
    CbxKeysTransfered: TCheckBox;
    LblTransKeys: TLabel;
    BtnPrint: TBitBtn;
    ChkbxMoneyInvent1: TCheckBox;
    ChkbxChequesInvent1: TCheckBox;
    SvcMEGCBooksNotStartedTheor: TSvcMaskEdit;
    SvcMEGCBooksNotStartedInvent: TSvcMaskEdit;
    SvcLFCollBagsMoneyTheor1: TSvcLocalField;
    SvcLFCollBagsChequesTheor1: TSvcLocalField;
    LblOperatorInfo: TLabel;
    procedure SvcLFKeyDown (    Sender : TObject;
                            var Key    : Word;
                                Shift  : TShiftState); virtual;
    procedure SvcMEKeyDown (    Sender : TObject;
                            var Key    : Word;
                                Shift  : TShiftState); virtual;
    procedure SvcLFMoneySafeChange (Sender : TObject); virtual;
    procedure FormActivate(Sender: TObject);
    procedure BtnAcceptClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure BtnPrintClick(Sender: TObject);
    procedure SvcLFValMoneyPresTheorChange(Sender: TObject);
    procedure SvcLFKeyDoubleDrawerInventExit(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure SvcLFKeySupervisorInventExit(Sender: TObject);
    procedure SvcLFValMoneyPresInventExit(Sender: TObject);
    procedure SvcLFInitPayinInventExit(Sender: TObject);
    procedure SvcLFMoneySafeInventExit(Sender: TObject);
    procedure SvcLFTotMoneySafeInventExit(Sender: TObject);
  protected
    FLstCntSafe    : TList;            // List of lines to print
    FQtyForCurr    : Integer;          // Quantity foreign currencies
    FQtyGiftCoup   : Integer;          // Quantity gift coupons
    FFlgEverActivated   : Boolean;     // Indicates first time form is activated
    IdtSafeTransOfSafe  : Integer;     // Idt of the safetransaction
    QtyChequeCollBags   : Integer;     // Qty cheque collection bags
    QtyMoneyCollBags    : Integer;     // Qty Money collection bags
    QtyChequeCollBagsOld: Integer;     // Qty cheque collection bags
    QtyMoneyCollBagsOld : Integer;     // Qty Money collection bags
    GiftCouponsList     : TStringList; // List to store all different gift coup.
    FNbTransactions : integer;         // Number of POSTransactions at start
    procedure CreateTenderGroupLists; virtual;
    procedure CopyLFToNew (CntIx    : Byte;
                           TxtName  : string;
                           TxtValue : string); virtual;
    procedure CopyCBToNew (CntIx    : Byte;
                           TxtName  : string;
                           TxtValue : string); virtual;
    procedure AddFldsForCurrency; virtual;
    procedure AddFldsGCBooksStarted; virtual;
    procedure AdjustPanels; virtual;
    procedure AddCntSafeToLstCntSafe (CodLine      : Byte;
                                      TxtDescr     : string;
                                      TxtExtraInfo : string;
                                      TxtValTheor  : string;
                                      TxtValInvent : string); virtual;
    procedure AddMoneyToLstCntSafe; virtual;
    procedure AddTotalMoneyToLstCntSafe; virtual;
    procedure AddBagsToLstCntSafe; virtual;
    procedure AddCollBagsMoneyToLstCntSafe; virtual;
    procedure AddCollBagsChequeToLstCntSafe; virtual;
    procedure AddCheqCadToLstCntSafe; virtual;
    procedure AddKeysToLstCntSafe; virtual;
    procedure AddForCurrToLstCntSafe; virtual;
    procedure AddTransKeysToLstCntSafe; virtual;
    procedure BuildLstCntSafe; virtual;
    procedure SaveDataInParameterTable; virtual;
    procedure BuildLstSafeTransaction; virtual;
    procedure BuildLstSafeTransactionCentral; virtual;
    procedure AddDetailCount (LstSafetrans : TLstSafeTransactionCA;
                              ObjSafeTrans : TObjSafeTransaction); virtual;
    procedure PrepareSafeTransActions; virtual;
    procedure RetrieveSafeTransActions; virtual;

    // function to retrieve amount;
    function GetMoney : Currency; virtual;
    function GetInitPayinAmount : Currency; virtual;
    function GetMoneySafeTheor : Currency; virtual;
    function GetQtySealedBags (IdtTenderGroup : Integer) : Integer; virtual;
    function GetQtyNbrCheques (IdtTenderGroup : Integer) : Integer; virtual;    //R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK
    function GetStrLstContainer (IdtTenderGroup : Integer) : TStringList;
                                                                        virtual;
    function NumberOfTransactions : integer; virtual;
  public
    property FlgEverActivated : Boolean read FFlgEverActivated;
  published
    property LstCntSafe : TList read FLstCntSafe
                                write FLstCntSafe;
    property QtyGiftCoup : Integer read FQtyGiftCoup
                                   write FQtyGiftCoup;
    property QtyForCurr : Integer read FQtyForCurr
                                   write FQtyForCurr;
  end;

var
  FrmTndRegCountSafeCA: TFrmTndRegCountSafeCA;

//*****************************************************************************

implementation

{$R *.DFM}

uses
  ScTskMgr_BDE_DBC,
  SfDialog,

  RFpnCom,

  DFpnCurrency,
  DFpnUtils,
  DFpnBagCA;

//=============================================================================
// Source-identifiers
//=============================================================================

const  // Module-name
  CtTxtModuleName = 'FTndRegCountSafeCA';

const  // PVCS-keywords
  CtTxtSrcName    = '$Source: E:/development/Castorama/Flexpoint/Src/Flexpoint201/Develop/FTndRegCountSafeCA.pas,v $';
  CtTxtSrcVersion = '$Revision: 2.1 $';
  CtTxtSrcDate    = '$Date: 2011/09/16 17:55:42 $';

//*****************************************************************************
// Implementation of TPnlTenderSafe
//*****************************************************************************

//=============================================================================
// TPnlTenderSafe.CreateLblDescr : create label for the description
//=============================================================================

function TPnlTenderSafe.CreateLblDescr (ValLeft    : Integer;
                                        TxtCaption : string) : TLabel;
begin  // of TPnlTenderSafe.CreateLblDescr
  Result := TLabel.Create (Owner);

  Result.Parent     := Self;
  Result.Caption    := TxtCaption;
  Result.AutoSize   := False;
  Result.Left       := ValLeft;
  Result.Top        := 4;
  Result.Width      := ViValWidthLbl;
end;   // of TPnlTenderSafe.CreateLblDescr

//=============================================================================
// TPnlTenderSafe.CreateSvcLFDescr : create a field to contain a description
//=============================================================================

function TPnlTenderSafe.CreateSvcLFDescr (ValLeft : Integer) : TSvcLocalField;
begin  // of TPnlTenderSafe.CreateSvcLFDescr
  Result := TSvcLocalField.Create (Owner);

  Result.Parent        := Self;
  Result.Left          := ValLeft;
  Result.DataType      := pftString;
  Result.MaxLength     := 15;
  Result.Local         := True;
  Result.LocalOptions  := [lfoLimitValue];
  Result.Options       := Result.Options + [efoRightAlign, efoRightJustify];
  Result.Width         := ViValWidthDescr;
  Result.Enabled       := False;
end;   // of TPnlTenderSafe.CreateSvcLFDescr

//=============================================================================
// TPnlTenderSafe.CreateSvcLFVal : create a field to contain a value
//=============================================================================

function TPnlTenderSafe.CreateSvcLFVal (ValLeft : Integer) : TSvcLocalField;
begin  // of TPnlTenderSafe.CreateSvcLFVal
  Result := TSvcLocalField.Create (Owner);

  Result.Parent        := Self;
  Result.Left          := ValLeft;
  Result.DataType      := pftDouble;
  Result.Local         := True;
  Result.LocalOptions  := [lfoLimitValue];
  Result.Options       := Result.Options + [efoRightAlign, efoRightJustify];
  Result.Width         := ViValWidthVal;
  Result.RangeLo       := '0';

  Result.OnKeyDown  := SvcLFKeyDown;
end;   // of TPnlTenderSafe.CreateSvcLFVal

//=============================================================================
// TPnlTenderSafe.CreateForTender : create the panel for registration
//=============================================================================

function TPnlTenderSafe.CreateForTender (ValTop        : Integer;
                                          ObjCntSafe    : TObjCntSafe;
                                          IdtTrans      : Integer;
                                          ValTndUnit    : Currency): String;
begin  // of TPnlTenderSafe.CreateForTender
  Self.Top := ValTop;
  Self.Align := alTop;
  Self.Height := 30;
  Self.Align := alTop;
  Self.BevelOuter := bvNone;
  Self.Caption := '';

  // Create label if necessary
  LblDescr := CreateLblDescr (ViValLeftLbl, ObjCntSafe.TxtDescr);

  // Create extra-info
  SvcLFDescr := CreateSvcLFDescr (ViValLeftExtra);
  SvcLFDescr.AsString := ObjCntSafe.TxtExtraInfo;

  // Add value to GiftCouponsList
  Result := 'TenderQtyGift' + Trim(Copy(ObjCntSafe.TxtExtraInfo, 1, 2));

  // Create Theor-value
  DmdFpnUtils.CloseInfo;
  SvcLFValTheor := CreateSvcLFVal (ViValLeftTheor);
  DmdFpnUtils.ClearQryInfo;
  DmdFpnUtils.QueryInfo('SELECT ' +
          #10'  ValParam = RTRIM (ValParam)' +
          #10'FROM ApplicParam (NOLOCK)' +
          #10'WHERE IdtApplicParam=' + AnsiQuotedStr (Result, ''''));
  SvcLFValTheor.AsString := DmdFpnUtils.QryInfo.FieldByName('ValParam').AsString;
  SvcLFValTheor.Enabled := False;
  DmdFpnUtils.CloseInfo;

  // Create Invent-value
  SvcLFValInvent := CreateSvcLFVal (ViValLeftInvent);
  SvcLFValInvent.AsString := ObjCntSafe.TxtValInvent;

  // Other properties
  IdtSafeTrans := IdtTrans;
  ValTenderUnit := ValTndUnit;
end;   // of TPnlTenderSafe.CreateForTender

//=============================================================================

procedure TPnlTenderSafe.SvcLFKeyDown (    Sender : TObject;
                                       var Key    : Word;
                                           Shift  : TShiftState);
begin  // of TPnlTenderSafe.SvcLFKeyDown
  if (Shift = []) and (Key in [VK_RETURN]) then begin
    PostMessage (TWinControl(Sender).Handle, WM_KeyDown, VK_TAB, 0);
    Key := 0;
  end;
end;   // of TPnlTenderSafe.SvcLFKeyDown

//*****************************************************************************
// Implementation of TFrmTndRegCountSafeCA
//*****************************************************************************

//=============================================================================
// TFrmTndRegCount.CreateTenderGroupLists : creates and loads from database
// the lists with TenderGroup, and TenderUnit, which weren't
// created yet.
//=============================================================================

procedure TFrmTndRegCountSafeCA.CreateTenderGroupLists;
begin  // of TFrmTndRegCountSafeCA.CreateTenderGroupLists
  if not Assigned (LstTenderGroup) then begin
    LstTenderGroup := TLstTenderGroup.Create;
    //if FrmMntTndCntSafeCA.FlgRemoveChequeKDO then                        //TCS Modification R2012.1--CAFR-suppression mention cheque kdo (sc)
       DmdFpnTenderGroupCA.BuildListTenderGroupActive(LstTenderGroup)      //TCS Modification R2012.1--CAFR-suppression mention cheque kdo (sc)
    //else
       //DmdFpnTenderGroupCA.BuildListTenderGroup (LstTenderGroup);
  end;

  if not Assigned (LstTenderUnit) then begin
    LstTenderUnit := TLstTenderUnit.Create;
    DmdFpnTenderGroupCA.BuildListTenderUnit (LstTenderUnit);
  end;
end;   // of TFrmTndRegCountSafeCA.CreateTenderGroupLists

//=============================================================================
// TFrmTndRegCountSafeCA.CopyLFToNew : First search the field to be copied.
// This is done by using the passed name and index.  Then a new field is created
// on the same panel.
//=============================================================================

procedure TFrmTndRegCountSafeCA.CopyLFToNew (CntIx   : Byte;
                                             TxtName : string;
                                             TxtValue : string);
var
  CmpToCopy        : TComponent;       // Field to copy
  SvcLFToCopy      : TSvcLocalField;   // Local field to copy
  SvcLFNew         : TSvcLocalField;   // New local field
begin  // of TFrmTndRegCountSafeCA.CopyLFToNew
  CmpToCopy := FindComponent (TxtName + IntToStr (CntIx - 1));
  if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then
    SvcLFToCopy := TSvcLocalField (CmpToCopy)
  else
    Exit;

  SvcLFNew := TSvcLocalField.Create (SvcLFToCopy.Owner);
  SvcLFNew.Parent        := SvcLFToCopy.Parent;
  SvcLFNew.Enabled       := SvcLFToCopy.Enabled;
  SvcLFNew.Left          := SvcLFToCopy.Left;
  SvcLFNew.DataType      := SvcLFToCopy.DataType;
  SvcLFNew.Local         := SvcLFToCopy.Local;
  SvcLFNew.LocalOptions  := SvcLFToCopy.LocalOptions;
  SvcLFNew.Options       := SvcLFToCopy.Options;
  SvcLFNew.Width         := SvcLFToCopy.Width;
  SvcLFNew.Top           := SvcLFToCopy.Top + SvcLFToCopy.Height + 3;
  SvcLFNew.Name          := TxtName + IntToStr (CntIx);
  SvcLFNew.Text          := TxtValue;

  SvcLFNew.OnKeyDown := SvcLFKeyDown;

  TPanel (SvcLFToCopy.Parent).Height := SvcLFNew.Top + SvcLFNew.Height + 3;
end;   // of TFrmTndRegCountSafeCA.CopyLFToNew

//=============================================================================
// TFrmTndRegCountSafeCA.CopyCBToNew : First search the checkbox to be copied.
// This is done by using the passed name and index.  Then a new checkbox is
// created on the same panel.
//=============================================================================

procedure TFrmTndRegCountSafeCA.CopyCBToNew (CntIx   : Byte;
                                             TxtName : string;
                                             TxtValue : string);
var
  CmpToCopy        : TComponent;       // Field to copy
  CBToCopy      : TCheckBox;   // Local field to copy
  CBNew         : TCheckBox;   // New local field
begin  // of TFrmTndRegCountSafeCA.CopyLFToNew
  CmpToCopy := FindComponent (TxtName + IntToStr (CntIx - 1));
  if Assigned (CmpToCopy) and (CmpToCopy is TCheckBox) then
    CBToCopy := TCheckBox (CmpToCopy)
  else
    Exit;

  CBNew := TCheckbox.Create (CBToCopy.Owner);
  CBNew.Parent        := CBToCopy.Parent;
  CBNew.Enabled       := CBToCopy.Enabled;
  CBNew.Left          := CBToCopy.Left;
  CBNew.Width         := CBToCopy.Width;
  CBNew.Top           := CBToCopy.Top + 24;
  CBNew.Name          := TxtName + IntToStr (CntIx);
  CBNew.Caption       := '';

  TPanel (CBToCopy.Parent).Height := CBNew.Top + 24;
end;   // of TFrmTndRegCountSafeCA.CopyLFToNew


//=============================================================================

procedure TFrmTndRegCountSafeCA.AddFldsForCurrency;
var
  CntGroup         : Integer;          // Counter to check the TenderGroups
  ObjCntSafe       : TObjCntSafe;      // Object to pass to panel
  ValTop           : Integer;          // Top for the panel
  PnlTender        : TPnlTenderSafe;   // Panel for gift coupons
  ValTabOrder      : Integer;          // TabOrder for the panel
begin  // of TFrmTndRegCountSafeCA.AddFldsForCurrency
  QtyForCurr := 0;
  ObjCntSafe := TObjCntSafe.Create;
  ValTop := PnlRegNumBagKeys.Top + PnlRegNumBagKeys.Height;
  ValTabOrder := PnlRegNumBagKeys.TabOrder;
  DmdFpnUtils.ClearQryInfo;
  for CntGroup := 0 to LstTenderGroup.Count - 1 do begin
    if LstTenderGroup.TenderGroup[CntGroup].IdtCurrency <>
       DmdFpnUtils.IdtCurrencyMain then begin
      QtyForCurr := QtyForCurr + 1;
      // Fill object
      if QtyForCurr = 1 then 
        ObjCntSafe.TxtDescr := CtTxtForeignCurrency
      else
        ObjCntSafe.TxtDescr := '';
      ObjCntSafe.TxtExtraInfo :=
        LstTenderGroup.TenderGroup[CntGroup].TxtPublDescr;
      ObjCntSafe.TxtValTheor  := '';
      ObjCntSafe.TxtValInvent := '';
      // Create panel
      PnlTender := TPnlTenderSafe.Create (Self);
      PnlTender.Name := ViTxtPnlForeignCurr + IntToStr (QtyForCurr);
      PnlTender.Parent := SbxCntSafe;
      PnlTender.TabOrder := ValTabOrder + 1;
      ValTabOrder := PnlTender.TabOrder;
      PnlTender.CreateForTender
        (ValTop, ObjCntSafe,
         LstTenderGroup.TenderGroup[CntGroup].IdtTenderGroup, 0);
      ObjCntSafe.TxtDescr := '';
      ValTop := ValTop + PnlTender.Height;
    end;
  end;
end;   // of TFrmTndRegCountSafeCA.AddFldsForCurrency

//=============================================================================

procedure TFrmTndRegCountSafeCA.AddFldsGCBooksStarted;
var
  CntUnit          : Integer;          // Counter TenderUnit
  ObjTenderUnit    : TObjTenderUnit;   // Current TenderUnit
  ObjTenderGroup   : TObjTenderGroup;  // Current TenderGroup
  TxtDescrCurrUnit : string;           // Description of the currency the units
                                       // are in
  PnlTender        : TPnlTenderSafe;   // Panel for gift coupons
  ObjCntSafe       : TObjCntSafe;      // Object to pass to panel
  ValTop           : Integer;          // Top for the panel
  ValTabOrder      : Integer;          // TabOrder for the panel
  CmpToCopy        : TComponent;       // Field to copy
begin  // of TFrmTndRegCountSafeCA.AddFldsGCBooksStarted
  DmdFpnUtils.CloseInfo;
  // Check idtTendergroup
  if IdtTGGiftCoup = 0 then
    Exit;
  // Get the description for the currency
  //TCS Modification R2012.1--CAFR-suppression mention cheque kdo (sc)--start
  if FrmMntTndCntSafeCA.FlgRemoveChequeKDO then begin
   ObjTenderGroup := nil;
   LblGCBooksNotStarted.Caption         := CtTxtOthers;
   //SvcMEGCBooksNotStartedTheor.Visible  := False;
   //SvcMEGCBooksNotStartedInvent.Visible := False
  end
  //TCS Modification R2012.1--CAFR-suppression mention cheque kdo (sc)--end
  else
   ObjTenderGroup :=
     LstTenderGroup.FindIdtTenderGroup (IdtTGGiftCoup);
  if ObjTenderGroup <> nil then begin
    TxtDescrCurrUnit :=
      DmdFpnCurrency.InfoCurrAssort [ObjTenderGroup.IdtCurrency,
                                     DmdFpnUtils.IdtTradeMatrixAssort,
                                     'TxtPublDescr'];
    QtyGiftCoup := 0;
    ObjCntSafe := TObjCntSafe.Create;
    ObjCntSafe.TxtDescr := CtTxtStartedGiftCoup;
    ValTop := PnlRegCollBagsCheques1.Top + PnlRegCollBagsCheques1.Height;
    ValTabOrder := PnlRegCollBagsCheques1.TabOrder;
    GiftCouponsList := TStringList.Create;
    repeat
      ObjTenderUnit :=
        LstTenderUnit.NextTenderUnit (IdtTGGiftCoup, CntUnit);
      if CntUnit <> -1 then begin
        // Fill object to pass
        ObjCntSafe.TxtExtraInfo :=
          CurrToStrF (ObjTenderUnit.ValUnit, ffFixed, 0) + ' ' + TxtDescrCurrUnit;
        ObjCntSafe.TxtValTheor  := '';
        ObjCntSafe.TxtValInvent := '';
        // Create panel
        QtyGiftCoup := QtyGiftCoup + 1;
        CmpToCopy := FindComponent (ViTxtPnlGiftCoupon + IntToStr (QtyGiftCoup));
        if Assigned (CmpToCopy) and (CmpToCopy is TPnlTenderSafe) then
          TPnlTenderSafe(CmpToCopy).Destroy;
        PnlTender := TPnlTenderSafe.Create (Self);
        PnlTender.Name := ViTxtPnlGiftCoupon + IntToStr (QtyGiftCoup);
        PnlTender.Parent := SbxCntSafe;
        PnlTender.TabOrder := ValTabOrder + 1;
        ValTabOrder := PnlTender.TabOrder;
        GiftCouponsList.Add(PnlTender.CreateForTender (ValTop, ObjCntSafe,
                                   IdtTGGiftCoup, ObjTenderUnit.ValUnit));
        ObjCntSafe.TxtDescr := '';
        ValTop := ValTop + PnlTender.Height;
      end;
    until CntUnit = -1;
  end;
end;   // of TFrmTndRegCountSafeCA.AddFldsGCBooksStarted

//=============================================================================

procedure TFrmTndRegCountSafeCA.AdjustPanels;
var
  CntIx            : Byte;             // Counter
  CmpToCopy        : TComponent;       // Field to copy
begin  // of TFrmTndRegCountSafeCA.AdjustPanels
  if QtyMoneyCollBagsOld > 1 then begin
    for CntIx := 2 to QtyMoneyCollBagsOld do begin
      CmpToCopy := FindComponent ('SvcLFCollBagsMoneyTheor' + IntToStr (CntIx));
      if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then
        TSvcLocalField (CmpToCopy).Destroy;
      CmpToCopy := FindComponent ('ChkbxMoneyInvent' + IntToStr (CntIx));
      if Assigned (CmpToCopy) and (CmpToCopy is TCheckBox) then
        TCheckBox (CmpToCopy).Destroy;
    end;
  end;
  if QtyMoneyCollBags > 1 then begin
    for CntIx := 2 to QtyMoneyCollBags do begin
      CopyLFToNew (CntIx, 'SvcLFCollBagsMoneyTheor', '');
      CopyCBToNew (CntIx, 'ChkbxMoneyInvent', '');
    end;
  end
  else if QtyMoneyCollBags = 0 then begin
    CmpToCopy := FindComponent ('SvcLFCollBagsMoneyTheor1');
    if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then begin
      TSvcLocalField (CmpToCopy).Text := '';
      TPanel (TSvcLocalField (CmpToCopy).Parent).Height :=
                                          TSvcLocalField (CmpToCopy).Top +
                                          TSvcLocalField (CmpToCopy).Height + 3;
    end;
  end
  else if QtyMoneyCollBags = 1 then begin
    CmpToCopy := FindComponent ('SvcLFCollBagsMoneyTheor1');
    if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then begin
      TPanel (TSvcLocalField (CmpToCopy).Parent).Height :=
                                          TSvcLocalField (CmpToCopy).Top +
                                          TSvcLocalField (CmpToCopy).Height + 3;
    end;
  end;
  if (QtyChequeCollBagsOld > 1) then begin
    for CntIx := 2 to QtyChequeCollBags do begin
      CmpToCopy := FindComponent ('SvcLFCollBagsChequesTheor' + IntToStr (CntIx));
      if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then
        TSvcLocalField (CmpToCopy).Destroy;
      CmpToCopy := FindComponent ('ChkbxChequesInvent' + IntToStr (CntIx));
      if Assigned (CmpToCopy) and (CmpToCopy is TCheckBox) then
        TCheckBox (CmpToCopy).Destroy;
    end;
  end;
  if (QtyChequeCollBags > 1) then begin
    for CntIx := 2 to QtyChequeCollBags do begin
      CopyLFToNew (CntIx, 'SvcLFCollBagsChequesTheor', '');
      CopyCBToNew (CntIx, 'ChkbxChequesInvent', '');
    end;
  end
  else if QtyMoneyCollBags = 0 then begin
    CmpToCopy := FindComponent ('SvcLFCollBagsChequesTheor1');
    if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then begin
      TSvcLocalField (CmpToCopy).Text := '';
      TPanel (TSvcLocalField (CmpToCopy).Parent).Height :=
                                          TSvcLocalField (CmpToCopy).Top +
                                          TSvcLocalField (CmpToCopy).Height + 3;
    end;
  end
  else if QtyMoneyCollBags = 1 then begin
    CmpToCopy := FindComponent ('SvcLFCollBagsChequesTheor1');
    if Assigned (CmpToCopy) and (CmpToCopy is TSvcLocalField) then
      TPanel (TSvcLocalField (CmpToCopy).Parent).Height :=
                                          TSvcLocalField (CmpToCopy).Top +
                                          TSvcLocalField (CmpToCopy).Height + 3;
  end;

  AddFldsGCBooksStarted;
  AddFldsForCurrency;
end;   // of TFrmTndRegCountSafeCA.AdjustPanels

//=============================================================================
// TFrmTndRegCountSafeCA.AddCntSafeToLstCntSafe : creates an TObjCntSafe object
// and adds it to the list.
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddCntSafeToLstCntSafe (CodLine      : Byte;
                                                        TxtDescr     : string;
                                                        TxtExtraInfo : string;
                                                        TxtValTheor  : string;
                                                        TxtValInvent : string);
var
  ObjCntSafe       : TObjCntSafe;
begin  // of TFrmTndRegCountSafeCA.AddCntSafeToLstCntSafe
  // Create the instance and fill it
  ObjCntSafe := TObjCntSafe.Create;
  ObjCntSafe.CodLine := CodLine;
  ObjCntSafe.TxtDescr := TxtDescr;
  ObjCntSafe.TxtExtraInfo := TxtExtraInfo;
  ObjCntSafe.TxtValTheor := TxtValTheor;
  ObjCntSafe.TxtValInvent := TxtValInvent;

  // Add it to the list
  LstCntSafe.Add (ObjCntSafe);

end;   // of TFrmTndRegCountSafeCA.AddCntSafeToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddMoneyToLstCntSafe : add the money-info to the list
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddMoneyToLstCntSafe;
begin  // of TFrmTndRegCountSafeCA.AddMoneyToLstCntSafe
  AddCntSafeToLstCntSafe (CtCodPrnMoney, LblMoneyPresent.Caption, '',
                          SvcLFValMoneyPresTheor.AsString,
                          SvcLFValMoneyPresInvent.AsString);
  AddCntSafeToLstCntSafe (CtCodPrnMoney, LblInitPayin.Caption, '',
                          SvcLFInitPayinTheor.AsString,
                          SvcLFInitPayinInvent.AsString);
  AddCntSafeToLstCntSafe (CtCodPrnMoney, LblCentralSafe.Caption, '',
                          SvcLFMoneySafeTheor.AsString,
                          SvcLFMoneySafeInvent.AsString);
end;   // of TFrmTndRegCountSafeCA.AddMoneyTo LstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddTotalMoneyToLstCntSafe : add the total amount of
// money to the list
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddTotalMoneyToLstCntSafe;
begin  // of TFrmTndRegCountSafeCA.AddTotalMoneyToLstCntSafe
  AddCntSafeToLstCntSafe (CtCodPrnTotMoney, LblTotalMoneySafe.Caption, '',
                          SvcLFTotMoneySafeTheor.AsString,
                          SvcLFTotMoneySafeInvent.AsString);
end;   // of TFrmTndRegCountSafeCA.AddTotalMoneyToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddBagsToLstCntSafe : add the bag-info to the list
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddBagsToLstCntSafe;
begin  // of TFrmTndRegCountSafeCA.AddBagsToLstCntSafe
  AddCntSafeToLstCntSafe (CtCodPrnSealedBags, LblCntBagsMoney.Caption, '',
                          SvcLFQtySldBagsMoneyTheor.AsString,
                          SvcLFQtySldBagsMoneyInvent.AsString);
  AddCntSafeToLstCntSafe (CtCodPrnSealedBags, LblCntBagsCheque.Caption, '',
                          SvcLFQtySldBagsChequeTheor.AsString,
                          SvcLFQtySldBagsChequeInvent.AsString);
end;   // of TFrmTndRegCountSafeCA.AddBagsToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddCollBagsMoneyToLstCntSafe : add the collection bags
// to the list.
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddCollBagsMoneyToLstCntSafe;
var
  CmpTheor         : TComponent;       // Theoretical value
  CmpInvent        : TComponent;       // Inventory value
  CntIx            : Byte;             // Counter
begin  // of TFrmTndRegCountSafeCA.AddCollBagsMoneyToLstCntSafe
  If ChkbxMoneyInvent1.Checked then
    AddCntSafeToLstCntSafe (CtCodPrnCollBags, LblCollBagsMoney1.Caption, '',
                            SvcLFCollBagsMoneyTheor1.AsString,
                            SvcLFCollBagsMoneyTheor1.AsString)
  else
    AddCntSafeToLstCntSafe (CtCodPrnCollBags, LblCollBagsMoney1.Caption, '',
                            SvcLFCollBagsMoneyTheor1.AsString, '');
  if QtyMoneyCollBags > 1 then begin
    for CntIx := 2 to QtyMoneyCollBags do begin
      CmpTheor := FindComponent ('SvcLFCollBagsMoneyTheor' + IntToStr (CntIx));
      CmpInvent := FindComponent ('ChkbxMoneyInvent' + IntToStr(CntIx));

      if Assigned (CmpTheor) and (CmpTheor is TSvcLocalField) and
      Assigned (CmpInvent) and (CmpInvent is TCheckbox) then begin
        if TCheckbox(CmpInvent).Checked then
          AddCntSafeToLstCntSafe (CtCodPrnCollBags, '', '',
                                  TSvcLocalField (CmpTheor).AsString,
                                  TSvcLocalField (CmpTheor).AsString)
        else
          AddCntSafeToLstCntSafe (CtCodPrnCollBags, '', '',
                                  TSvcLocalField (CmpTheor).AsString, '');
      end;
    end;
  end;
end;   // of TFrmTndRegCountSafeCA.AddCollBagsMoneyToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddCollBagsChequeToLstCntSafe : add the collection bags
// to the list.
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddCollBagsChequeToLstCntSafe;
var
  CmpTheor         : TComponent;       // Theoretical value
  CmpInvent        : TComponent;       // Inventory value
  CntIx            : Byte;             // Counter
begin  // of TFrmTndRegCountSafeCA.AddCollBagsChequeToLstCntSafe
  if ChkbxChequesInvent1.Checked then
    AddCntSafeToLstCntSafe (CtCodPrnCollBags, LblCollBagsCheques1.Caption, '',
                            SvcLFCollBagsChequesTheor1.AsString,
                            SvcLFCollBagsChequesTheor1.AsString)
  else
    AddCntSafeToLstCntSafe (CtCodPrnCollBags, LblCollBagsCheques1.Caption, '',
                            SvcLFCollBagsChequesTheor1.AsString, '');
  if QtyChequeCollBags > 1 then begin
    for CntIx := 2 to QtyChequeCollBags do begin
      CmpTheor := FindComponent ('SvcLFCollBagsChequesTheor' + IntToStr(CntIx));
      CmpInvent := FindComponent ('ChkbxChequesInvent' +
                                  IntToStr (CntIx));
      if Assigned (CmpTheor) and (CmpTheor is TSvcLocalField) and
      Assigned (CmpInvent) and (CmpInvent is TCheckBox) then begin
        if TCheckbox(CmpInvent).Checked then
          AddCntSafeToLstCntSafe (CtCodPrnCollBags, '', '',
                                  TSvcLocalField (CmpTheor).AsString,
                                  TSvcLocalField (CmpTheor).AsString)
        else
          AddCntSafeToLstCntSafe (CtCodPrnCollBags, '', '',
                                  TSvcLocalField (CmpTheor).AsString, '');
      end;
    end;
  end;
end;   // of TFrmTndRegCountSafeCA.AddCollBagsChequeToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddCheqCadToLstCntSafe : add the gift coupon-info
// to the list.
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddCheqCadToLstCntSafe;
var
  CntIx            : Byte;             // Counter
  CmpTender        : TComponent;       // Component
  PnlTender        : TPnlTenderSafe;   // Panel for gift coupons
begin  // of TFrmTndRegCountSafeCA.AddCheqCadToLstCntSafe
  if QtyGiftCoup <> 0 then begin
    for CntIx := 1 to QtyGiftCoup do begin
      CmpTender := FindComponent (ViTxtPnlGiftCoupon + IntToStr (CntIx));
      if Assigned (CmpTender) and (CmpTender is TPnlTenderSafe) then begin
        PnlTender := TPnlTenderSafe (CmpTender);
        AddCntSafeToLstCntSafe (CtCodPrnGCStarted, PnlTender.LblDescr.Caption,
                                PnlTender.SvcLFDescr.AsString,
                                PnlTender.SvcLFValTheor.AsString,
                                PnlTender.SvcLFValInvent.AsString);
      end;
    end;
  end;

  AddCntSafeToLstCntSafe (CtCodPrnGCNotStarted, LblGCBooksNotStarted.Caption,'',
                          SvcMEGCBooksNotStartedTheor.TrimText,
                          SvcMEGCBooksNotStartedInvent.TrimText);
end;   // of TFrmTndRegCountSafeCA.AddCheqCadToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddKeysToLstCntSafe : add the key-info to the list
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddKeysToLstCntSafe;
begin  // of TFrmTndRegCountSafeCA.AddKeysToLstCntSafe
  AddCntSafeToLstCntSafe (CtCodPrnKeys, LblKeySupervisor.Caption, '',
                          SvcLFKeySupervisorTheor.AsString,
                          SvcLFKeySupervisorInvent.AsString);
  AddCntSafeToLstCntSafe (CtCodPrnKeys, LblKeyDoubleDrawer.Caption, '',
                          SvcLFKeyDoubleDrawerTheor.AsString,
                          SvcLFKeyDoubleDrawerInvent.AsString);
end;   // of TFrmTndRegCountSafeCA.AddKeysToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddForCurrToLstCntSafe : add the foreign currenty-info
// to the list.
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddForCurrToLstCntSafe;
var
  CntIx            : Byte;             // Counter
  CmpTender        : TComponent;       // Component
  PnlTender        : TPnlTenderSafe;   // Panel for gift coupons
begin  // of TFrmTndRegCountSafeCA.AddForCurrToLstCntSafe
  if QtyForCurr = 0 then
    Exit;

  for CntIx := 1 to QtyForCurr do begin
    CmpTender := FindComponent (ViTxtPnlForeignCurr + IntToStr (CntIx));
    if Assigned (CmpTender) and (CmpTender is TPnlTenderSafe) then begin
      PnlTender := TPnlTenderSafe (CmpTender);
      AddCntSafeToLstCntSafe (CtCodPrnForCurr, PnlTender.LblDescr.Caption,
                              PnlTender.SvcLFDescr.AsString,
                              PnlTender.SvcLFValTheor.AsString,
                              PnlTender.SvcLFValInvent.AsString);
    end;
  end;
end;   // of TFrmTndRegCountSafeCA.AddForCurrToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.AddTransKeysToLstCntSafe : add the 'transfer keys' to
// the list.
//=============================================================================

procedure TFrmTndRegCountSafeCA.AddTransKeysToLstCntSafe;
var
  TxtExtraInfo     : string;
begin  // of TFrmTndRegCountSafeCA.AddTransKeysToLstCntSafe
  if CbxKeysTransfered.Checked then
    TxtExtraInfo := CtTxtTransferKeysOK
  else
    TxtExtraInfo := CtTxtTransferKeysNOK;
  AddCntSafeToLstCntSafe (CtCodPrnTransKey, LblTransKeys.Caption, TxtExtraInfo,
                          '', '');
end;   // of TFrmTndRegCountSafeCA.AddTransKeysToLstCntSafe

//=============================================================================
// TFrmTndRegCountSafeCA.BuildLstCntSafe : build the list to pass to the report
//=============================================================================

procedure TFrmTndRegCountSafeCA.BuildLstCntSafe;
begin  // of TFrmTndRegCountSafeCA.BuildLstCntSafe
  if not Assigned (LstCntSafe) then
    LstCntSafe := TList.Create
  else
    LstCntSafe.Clear;

  AddMoneyToLstCntSafe;
  AddTotalMoneyToLstCntSafe;
  AddBagsToLstCntSafe;
  AddCollBagsMoneyToLstCntSafe;
  AddCollBagsChequeToLstCntSafe;
  AddCheqCadToLstCntSafe;
  AddKeysToLstCntSafe;
  AddForCurrToLstCntSafe;
  AddTransKeysToLstCntSafe;
end;   // of TFrmTndRegCountSafeCA.BuildLstCntSafe

//=============================================================================

procedure TFrmTndRegCountSafeCA.SaveDataInParameterTable;
var
  CntIx            : Byte;             // Counter
  CmpTender        : TComponent;       // Component
  PnlTender        : TPnlTenderSafe;   // Panel for gift coupons
begin  // of TFrmTndRegCountSafeCA.SaveDataInParameterTable
  if QtyGiftCoup <> 0 then begin
    for CntIx := 1 to QtyGiftCoup do begin
      CmpTender := FindComponent (ViTxtPnlGiftCoupon + IntToStr (CntIx));
      if Assigned (CmpTender) and (CmpTender is TPnlTenderSafe) then begin
        PnlTender := TPnlTenderSafe (CmpTender);      
        DmdFpnUtils.AddSQLUpdateSysPrm(GiftCouponsList.Strings[CntIx-1],
                                       StrToCurr(PnlTender.SvcLFValInvent.AsString),
                                       '', '');
        DmdFpnUtils.ExecQryInfo;
        DmdFpnUtils.ClearQryInfo;
        DmdFpnUtils.CloseInfo;
      end;
    end;
  end;
  if length(trim(SvcMEGCBooksNotStartedInvent.TrimText)) > 0 then begin
     DmdFpnUtils.ClearQryInfo;
     DmdFpnUtils.AddSQLUpdateSysPrm(CtTxtSysPrmQtyNtStarted, 0,
                                    SvcMEGCBooksNotStartedInvent.TrimText, '');
     DmdFpnUtils.ExecQryInfo;
  end;
  DmdFpnUtils.ClearQryInfo;
  DmdFpnUtils.CloseInfo;
  if length(trim(SvcLFKeySupervisorInvent.AsString)) > 0 then begin
     DmdFpnUtils.ClearQryInfo;
     DmdFpnUtils.AddSQLUpdateSysPrm(CtTxtSysPrmBagSupervisor, 0,
                                    SvcLFKeySupervisorInvent.AsString, '');
     DmdFpnUtils.ExecQryInfo;
  end;
  DmdFpnUtils.ClearQryInfo;
  DmdFpnUtils.CloseInfo;
  if length(trim(SvcLFKeyDoubleDrawerInvent.AsString)) > 0 then begin
     DmdFpnUtils.ClearQryInfo;
     DmdFpnUtils.AddSQLUpdateSysPrm(CtTxtSysPrmBagDoubleDrawer, 0,
                                    SvcLFKeyDoubleDrawerInvent.AsString, '');
     DmdFpnUtils.ExecQryInfo;
  end;
end;   // of TFrmTndRegCountSafeCA.SaveDataInParameterTable

//=============================================================================
// TFrmTndRegCountSafeCA.PrepareSafeTransActions : create the necessary
// components to store the safetransactions in.
//=============================================================================

procedure TFrmTndRegCountSafeCA.PrepareSafeTransActions;
begin  // of TFrmTndRegCountSafeCA.PrepareSafeTransActions
  // Clear LstSafeTransaction
  if not Assigned (LstSafeTransaction) then
    LstSafeTransaction := TLstSafeTransactionCA.Create
  else
    LstSafeTransaction.ClearSafeTransactions;
end;   // of TFrmTndRegCountSafeCA.PrepareSafeTransActions

//=============================================================================
// TFrmTndRegCountSafeCA.RetrieveSafeTransActions : retrieve the data of the
// safetransactions for the safe and the central safe
//=============================================================================

procedure TFrmTndRegCountSafeCA.RetrieveSafeTransActions;
var
  ValInitPayin     : Currency;         // The initial payin value
  StrLstMoneyCont  : TStringList;      // List for money containers
  StrLstChequeCont : TStringList;      // List for cheque containers
  CntIndex         : Integer;          // Container index
  CmpTheor         : TSvcLocalField;   // Local field to retrieve
begin  // of TFrmTndRegCountSafeCA.RetrieveSafeTransActions
  if not Assigned (LstBag) then begin
    LstBag := TLstBagCA.Create;
    DmdFpnBagCA.BuildListBag (LstBag, -1, -1);
  end;
  // Retrieve safetransaction for the safe
  IdtSafeTransOfSafe :=
    DmdFpnSafeTransactionCA.RetrieveRunningSafeTransCashdesk (CtIdtSafe);
  if IdtSafeTransOfSafe <> 0 then begin
    DmdFpnSafeTransactionCA.BuildListSafeTransactionAndDetail(LstSafeTransaction,
                                                              IdtSafeTransOfSafe);
    ValInitPayin := GetInitPayinAmount;
//    SvcLFValMoneyPresTheor.AsFloat := GetMoney - ValInitPayin;
//    SvcLFInitPayinTheor.AsFloat := ValInitPayin;
    SvcLFValMoneyPresTheor.AsFloat := GetMoney + ValInitPayin;
    if ValInitPayIn = 0 then
      SvcLFInitPayinTheor.AsFloat := ValInitPayin
    else
      SvcLFInitPayinTheor.AsFloat := - ValInitPayin;
    SvcLFMoneySafeTheor.AsFloat := GetMoneySafeTheor;
    SvcLFTotMoneySafeTheor.AsFloat := SvcLFValMoneyPresTheor.AsFloat +
                                      SvcLFInitPayinTheor.AsFloat +
                                      SvcLFMoneySafeTheor.AsFloat;
    SvcLFQtySldBagsMoneyTheor.AsInteger := GetQtySealedBags (IdtTGMoneyCoup);
    //R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK.Start
    if FrmMntTndCntSafeCA.FlgNbrofCheques then
      SvcLFQtySldBagsChequeTheor.AsInteger := GetQtyNbrCheques (IdtTGCheques)
    else
    //R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK.End
      SvcLFQtySldBagsChequeTheor.AsInteger := GetQtySealedBags (IdtTGCheques);
    StrLstMoneyCont := GetStrLstContainer (IdtTGMoneyCoup);
    StrLstChequeCont := GetStrLstContainer (IdtTGCheques);
    QtyMoneyCollBagsOld := QtyMoneyCollBags;
    QtyChequeCollBagsOld := QtyChequeCollBags;
    QtyMoneyCollBags := StrLstMoneyCont.Count;
    QtyChequeCollBags := StrLstChequeCont.Count;
    AdjustPanels;
    try
      for CntIndex := 0 to Pred (StrLstMoneyCont.Count) do begin
        CmpTheor := TSvcLocalField (FindComponent ('SvcLFCollBagsMoneyTheor' +
                                                   IntToStr (CntIndex + 1)));
        if Assigned (CmpTheor) then
          CmpTheor.AsString := StrLstMoneyCont.Strings [CntIndex]
      end;
    finally
      StrLstMoneyCont.Free;
    end;

    try
      for CntIndex := 0 to Pred (StrLstChequeCont.Count) do begin
        CmpTheor := TSvcLocalField (FindComponent ('SvcLFCollBagsChequesTheor' +
                                                   IntToStr (CntIndex + 1)));
        if Assigned (CmpTheor) then
          CmpTheor.AsString := StrLstChequeCont.Strings [CntIndex]
      end;
    finally
      StrLstChequeCont.Free;
    end;
    // Bag Supervisor
    DmdFpnUtils.ClearQryInfo;
    DmdFpnUtils.QueryInfo('SELECT ' +
          #10'  TxtParam = RTRIM (TxtParam)' +
          #10'FROM ApplicParam (NOLOCK)' +
          #10'WHERE IdtApplicParam=' +
              AnsiQuotedStr (CtTxtSysPrmBagSupervisor, ''''));
    SvcLFKeySuperVisorTheor.AsString :=
          DmdFpnUtils.QryInfo.FieldByName('TxtParam').AsString;
    // Bag Double Drawer
    DmdFpnUtils.ClearQryInfo;
    DmdFpnUtils.QueryInfo('SELECT ' +
          #10'  TxtParam = RTRIM (TxtParam)' +
          #10'FROM ApplicParam (NOLOCK)' +
          #10'WHERE IdtApplicParam=' +
              AnsiQuotedStr (CtTxtSysPrmBagDoubleDrawer, ''''));
    SvcLFKeyDoubleDrawerTheor.AsString :=
          DmdFpnUtils.QryInfo.FieldByName('TxtParam').AsString;
    // Quantity Not Started
    DmdFpnUtils.ClearQryInfo;
    DmdFpnUtils.QueryInfo('SELECT ' +
          #10'  TxtParam = RTRIM (TxtParam)' +
          #10'FROM ApplicParam (NOLOCK)' +
          #10'WHERE IdtApplicParam=' +
              AnsiQuotedStr (CtTxtSysPrmQtyNtStarted, ''''));
    SvcMEGCBooksNotStartedTheor.Text :=
          DmdFpnUtils.QryInfo.FieldByName('TxtParam').AsString;
  end;
end;   // of TFrmTndRegCountSafeCA.RetrieveSafeTransActions

//=============================================================================
// TFrmTndRegCountSafeCA.GetQtySealedBags : Gets the amount of sealed bags for
// a certain type of tendergroup
//                                  -----
// INPUT  : IdtTenderGroup = Tendergroup number
//=============================================================================

function TFrmTndRegCountSafeCA.GetQtySealedBags
                                           (IdtTenderGroup : Integer) : Integer;
var
  CntIndex         : Integer;          // Index of bag
  ObjBag           : TObjBagCA;        // Bag object
begin  // of TFrmTndRegCountSafeCA.GetQtySealedBags
  Result := 0;
  if not Assigned (LstBag) then begin
    LstBag := TLstBagCA.Create;
    DmdFpnBagCA.BuildListBag (LstBag, -1, -1);
  end;
  for CntIndex := 0 to Pred (LstBag.Count) do begin
    ObjBag := LstBag.Bag [CntIndex];
    if (ObjBag.IdtContainer = '') and
       not (ObjBag.FlgTransfer) and
       (ObjBag.IdtTenderGroup = IdtTenderGroup) and
       (ObjBag.IdtSafeTransaction = IdtSafeTransOfSafe) then
      Inc (Result);
  end;
end;   // of TFrmTndRegCountSafeCA.GetQtySealedBags

//=============================================================================
// TFrmTndRegCountSafeCA.GetQtyNbrCheques : Gets the number of cheques for
// a certain type of tendergroup
//                                  -----
// INPUT  : IdtTenderGroup = Tendergroup number
//=============================================================================
//R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK.Start
function TFrmTndRegCountSafeCA.GetQtyNbrCheques
                                           (IdtTenderGroup : Integer) : Integer;
var
  QtyNbCheques : Integer;
  ValTotal : Currency;
  CntIndex         : Integer;          // Index of bag
  ObjBag           : TObjBagCA;        // Bag object
begin  // of TFrmTndRegCountSafeCA.GetQtyNbrCheques
  Result := 0;
  QtyNbCheques := 0;
  if not Assigned (LstBag) then begin
    LstBag := TLstBagCA.Create;
    DmdFpnBagCA.BuildListBag (LstBag, -1, -1);
  end;
  for CntIndex := 0 to Pred (LstBag.Count) do begin
    ObjBag := LstBag.Bag [CntIndex];
    if (ObjBag.IdtContainer = '') and
       not (ObjBag.FlgTransfer) and
       (ObjBag.IdtTenderGroup = IdtTenderGroup) and
       (ObjBag.IdtSafeTransaction = IdtSafeTransOfSafe) then
    begin
      LstSafeTransaction.TotalTransDetail(ObjBag.IdtSafeTransaction,
                                            ObjBag.NumSeq, ObjBag.IdtTenderGroup,
                                            False, QtyNbCheques, ValTotal);
      Result := Result + QtyNbCheques;
    end;
  end;
end;  // of TFrmTndRegCountSafeCA.GetQtyNbrCheques
//R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK.End
//=============================================================================

function TFrmTndRegCountSafeCA.GetStrLstContainer
                                   (IdtTenderGroup : Integer) : TStringList;
var
  CntIndex         : Integer;          // Index of bag
begin  // of TFrmTndRegCountSafeCA.GetStrLstContainer
  Result := TStringList.Create;
  if not Assigned (LstBag) then begin
    LstBag := TLstBagCA.Create;
    DmdFpnBagCA.BuildListBag (LstBag, -1, -1);
  end;
  for CntIndex := 0 to Pred (LstBag.Count) do begin
    if (LstBag.Bag [CntIndex].IdtContainer <> '') and
       not (LstBag.Bag [CntIndex].FlgTransfer) and
       (LstBag.Bag [CntIndex].IdtTenderGroup = IdtTenderGroup) then
      if Result.IndexOf (LstBag.Bag [CntIndex].IdtContainer) = -1 then
        Result.Add (LstBag.Bag [CntIndex].IdtContainer);
  end;
end;   // of TFrmTndRegCountSafeCA.GetStrLstContainer

//=============================================================================
// TClass.Procedure : explanation
//                                  -----
// INPUT  : Var = Explanation
//                                  -----
// OUTPUT : Var = Explanation
//=============================================================================
function TFrmTndRegCountSafeCA.GetMoney : Currency;
var
  QtyTotal         : Integer;          // To fill the total
  ValTotal         : Currency;         // Total amount
  CntItem          : Integer;          // Item counter
  CntBags          : Integer;          // Bag counter
  ObjSafeTrans     : TObjSafeTransaction; // Safetransaction object
  FlgBagExists     : Boolean;          // Flag if money is in bag or not
  ObjBag           : TObjBagCA;        // Bag object
  ValSign          : Integer;          // contains 1 or -1 to multiply with
begin  // of TFrmTndRegCountSafeCA.GetMoney
  Result := 0.0;
  for CntItem := 0 to Pred (LstSafeTransaction.Count) do begin
    ObjSafeTrans := LstSafeTransaction.SafeTransaction[CntItem];
    FlgBagExists := False;
    for CntBags := 0 to Pred (LstBag.Count) do begin
      ObjBag := LstBag.Bag [CntBags];
      if (ObjSafetrans.IdtSafeTransaction = ObjBag.IdtSafeTransaction) and
         (ObjSafeTrans.NumSeq = ObjBag.NumSeq) and
         (ObjBag.IdtTenderGroup = 1) then begin
        FlgBagExists := True;
        Break;
      end;
    end;
    if not FlgBagExists then begin
      LstSafeTransaction.TotalTransDetail
             (IdtSafeTransOfSafe,
              LstSafeTransaction.SafeTransaction [CntItem].NumSeq, IdtTGMoneyCoup,
              True, QtyTotal, ValTotal);
      ValSign := -1;
      if (ObjSafeTrans.CodType = CtCodSttPayInTender) or
         (ObjSafeTrans.CodType = CtCodSttPayInTransfer) then
        ValSign := 1;
      Result := Result + (ValTotal * ValSign);
    end;
  end;
  Result := Result;
end;   // of TFrmTndRegCountSafeCA.GetMoney

//=============================================================================
// TClass.Procedure : explanation
//                                  -----
// INPUT  : Var = Explanation
//                                  -----
// OUTPUT : Var = Explanation
//=============================================================================
function TFrmTndRegCountSafeCA.GetInitPayinAmount : Currency;
var
  LstSafeTrans     : TLstSafeTransaction;  // SafeTransaction list
  QtyTotal         : Integer;          // To fill the total
  ValTotal         : Currency;         // Total amount
  CntItem          : Integer;          // Item counter
  ValSign          : Integer;          // contains 1 or -1 to multiply with
begin  // of TFrmTndRegCountSafeCA.GetInitPayinAmount
  Result := 0.0;
  LstSafeTrans := TLstSafeTransaction.Create;
  try
    DmdFpnSafeTransactionCA.BuildListSafeTransAndDetailInitPayIn (0.0,
                                                                  LstSafeTrans,
                                                                  False);
    for CntItem := 0 to Pred (LstSafeTrans.Count) do begin
      LstSafeTrans.TotalTransDetail
             (LstSafeTrans.SafeTransaction [CntItem].IdtSafeTransaction,
              LstSafeTrans.SafeTransaction [CntItem].NumSeq, QtyTotal,
              ValTotal);
      ValSign := -1;
      if (LstSafeTrans.SafeTransaction [CntItem].CodType = CtCodSttPayInTender)
         or
         (LstSafeTrans.SafeTransaction [CntItem].CodType =CtCodSttPayInTransfer)
         then
        ValSign := 1;
      Result := Result + (ValTotal * ValSign);
    end;
  finally
    LstSafeTrans.Free;
  end;
  Result := Result;
end;   // of TFrmTndRegCountSafeCA.GetInitPayinAmount

//=============================================================================
// TClass.Procedure : explanation
//                                  -----
// INPUT  : Var = Explanation
//                                  -----
// OUTPUT : Var = Explanation
//=============================================================================
function TFrmTndRegCountSafeCA.GetMoneySafeTheor : Currency;
var
  LstSafeTrans     : TLstSafeTransaction;  // SafeTransaction list
  QtyTotal         : Integer;          // To fill the total
  ValTotal         : Currency;         // Total amount
  CntItem          : Integer;          // Item counter
  IdtSafeTrans     : Integer;          // Safe Transaction identifier
  ObjSafeTrans     : TObjSafeTransaction; // Safetransaction object
  ValSign          : Integer;          // contains 1 or -1 to multiply with
begin  // of TFrmTndRegCountSafeCA.GetMoneySafeTheor
  Result := 0.0;
  LstSafeTrans := TLstSafeTransaction.Create;
  try
    IdtSafeTrans := DmdFpnSafeTransactionCA
                           .RetrieveRunningSafeTransCashdesk (CtIdtChangeSafe);
    if IdtSafeTrans > 0 then
      DmdFpnSafeTransactionCA.BuildListSafeTransactionAndDetail (LstSafeTrans,
                                                                 IdtSafeTrans);
    for CntItem := 0 to Pred (LstSafeTrans.Count) do begin
      ObjSafeTrans := LstSafeTrans.SafeTransaction[CntItem];
      LstSafeTrans.TotalTransDetail
             (ObjSafeTrans.IdtSafeTransaction, ObjSafeTrans.NumSeq, 1, False,
              QtyTotal, ValTotal);
      ValSign := -1;
      if (ObjSafeTrans.CodType = CtCodSttPayInTender) or
         (ObjSafeTrans.CodType = CtCodSttPayinCashDesk) or
         (ObjSafeTrans.CodType = CtCodSttPayInTransfer) then
        ValSign := 1;
      Result := Result + (ValTotal * ValSign);
    end;
  finally
    LstSafeTrans.Free;
  end;
  Result := Result;
end;   // of TFrmTndRegCountSafeCA.GetMoneySafeTheor

//=============================================================================

function TFrmTndRegCountSafeCA.NumberOfTransactions : integer;
begin  // of TFrmTndRegCountSafeCA.NumberOfPOSTransactions
  try
    DmdFpnUtils.CloseInfo;
    if DmdFpnUtils.QueryInfo ('SELECT Aantal = SUM(Aantal) FROM' +
                             #10'     (SELECT Aantal=COUNT(*)' +
                             #10'      FROM SafeTransAction' +
                             #10'      WHERE DatModify > ' +
                             AnsiQuotedStr(FormatDatetime('yyyymmdd', Now) +
                                       ' 00:00:00', '''') +
                             #10'      UNION' +
                             #10'      SELECT Aantal=COUNT(*)' +
                             #10'      FROM POCHETTE) AS DBTEST') then
      Result := DmdFpnUtils.QryInfo.FieldByName ('Aantal').AsInteger
    else
      Result := 0;
  finally
    DmdFpnUtils.CloseInfo;
  end
end;   // of TFrmTndRegCountSafeCA.NumberOfPOSTransactions

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFKeyDown (    Sender : TObject;
                                              var Key    : Word;
                                                  Shift  : TShiftState);
begin  // of TFrmTndRegCountSafeCA.SvcLFKeyDown
  if (Shift = []) and (Key in [VK_RETURN]) then begin
    PostMessage (TWinControl(Sender).Handle, WM_KeyDown, VK_TAB, 0);
    Key := 0;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFKeyDown

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFMoneySafeChange (Sender : TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFMoneySafeChange
  SvcLFTotMoneySafeInvent.AsFloat :=
    SvcLFValMoneyPresInvent.AsFloat + SvcLFInitPayinInvent.AsFloat +
    SvcLFMoneySafeInvent.AsFloat;
end;   // of TFrmTndRegCountSafeCA.SvcLFMoneySafeChange

//=============================================================================

procedure TFrmTndRegCountSafeCA.FormActivate(Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.FormActivate
  inherited;
  Application.Title := CtApplicationTitle;
  if not FlgEverActivated then begin
    FNbTransactions := NumberOfTransactions;
    // **** Added for Safetybox Traceability, PM (TCS), R2011.2, BDFR - Start ****
    LblOperatorInfo.Caption := CtTxtChecksBy + FMntTndCntSafeCA.FrmMntTndCntSafeCA.IdtOperator + ' ' + FMntTndCntSafeCA.FrmMntTndCntSafeCA.OperatorTxtName;
    if FMntTndCntSafeCA.FrmMntTndCntSafeCA.FlgLoginRequired = True then begin
         LblOperatorInfo.Visible := True;
    end
    else begin
         LblOperatorInfo.Visible := False;
    end;
    //R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK.Start
    if FrmMntTndCntSafeCA.FlgNbrofCheques then
      LblCntBagsCheque.Caption := CtTxtNbrofCheques;
    //R2014.1.Req41040.CAFR.Remove-Entry-Number-Envelope-for-cheques.TCS-TK.End
     // **** Added for Safetybox Traceability, PM (TCS), R2011.2, BDFR - End ****
    CreateTenderGroupLists;
    PrepareSafeTransActions;
    RetrieveSafeTransActions;
  end;

  FFlgEverActivated := True;
end;   // of TFrmTndRegCountSafeCA.FormActivate

//=============================================================================

procedure TFrmTndRegCountSafeCA.BtnAcceptClick(Sender: TObject);
var
  FNbOldTransactions   : integer;   // Old number of transactions
begin  // of TFrmTndRegCountSafeCA.BtnAcceptClick
  inherited;
  FNbOldTransactions := FNbTransactions;
  FNbTransactions := NumberOfTransactions;
  if FNbTransactions <> FNbOldTransactions then begin
    PrepareSafeTransActions;
    LstBag.Destroy;
    LstBag := nil;
    RetrieveSafeTransActions;
    MessageDlg (CtTxtNewTransactions, mtWarning, [mbOk],0);
  end
  else begin
    if SvcLFValMoneyPresInvent.AsFloat = 0.0 then
      if MessageDlgBtns(CtTxtZeroAmount, mtWarning,
                        [CtTxtYes,CtTxtNo], 2, 0, 0) = 2 then
        Exit;

    BuildLstCntSafe;
    SaveDataInParameterTable;
    BuildLstSafeTransaction;
    BuildLstSafeTransactionCentral;
    try
      SvcTaskMgr.LaunchTask ('PrintReport');
    finally
      ModalResult := mrOK;
    end;
  end;
end;   // of TFrmTndRegCountSafeCA.BtnAcceptClick

//=============================================================================

procedure TFrmTndRegCountSafeCA.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin  // of TFrmTndRegCountSafeCA.FormClose
  inherited;
  if Assigned (LstCntSafe) then begin
    LstCntSafe.Destroy;
    LstCntSafe := nil;
  end;
end;   // of TFrmTndRegCountSafeCA.FormClose

//=============================================================================

procedure TFrmTndRegCountSafeCA.BuildLstSafeTransaction;
var
  CntItem          : Integer;         // Item counter
  CntDetail        : Integer;         // Detail counter
  LstSafeTrans     : TLstSafeTransactionCA; // Safe transaction
  ObjSafeTrans     : TObjSafeTransaction;
  ObjSafeTransNew  : TObjSafeTransaction;
  ObjSafeTransIn   : TObjSafeTransaction;
  ObjTransDetail   : TObjTransDetail;
  ObjTransDetailNew: TObjTransDetail;
  ObjTransDetailIn : TObjTransDetail;
  ObjBag           : TObjBagCA;
  ObjBagIn         : TObjBagCA;
  IdtSafeTransIn   : Integer;
  NumSeqNew         : Integer;
  IdtSafeTransNew  : Integer;
  CntLines         : Integer;          // Line counter
  CntIndex         : Integer;          // Index of transaction
  QtyValue         : Integer;          // The Quantity of a value
  ValAmount        : Currency;         // the amount of a value
  ValTotal         : Currency;
  ObjTenderGroup   : TObjTenderGroup;  // Tendergroup object
begin  // of TFrmTndRegCountSafeCA.BuildLstSafeTransaction
  LstSafeTrans := TLstSafeTransactionCA.Create;
  repeat
    IdtSafeTransIn := DmdFpnUtils.GetNextCounter (CtTxtACSafeTransactionIdtAC,
                                                  CtTxtACSafeTransactionField);
  until not DmdFpnSafeTransactionCA.SafeTransactionExists(IntToStr(IdtSafeTransIn));
  IdtSafeTransNew := DmdFpnSafeTransactionCA.
                       RetrieveRunningSafeTransCashdesk (CtIdtSafe);
  if IdtSafeTransNew = 0 then
    IdtSafeTransNew := IdtSafeTransIn - 1;
  DmdFpnUtils.CloseInfo;
  NumSeqNew := DmdFpnSafeTransactionCA.RetrieveMaxNumSeq (IdtSafeTransNew);
  // First add all the bags
  for CntItem := 0 to Pred (LstBag.Count) do begin
    ObjBag := LstBag.Bag [CntItem];
    CntIndex := LstSafeTransaction.IndexOfIdtAndSeq (ObjBag.IdtSafeTransaction,
                                                     ObjBag.NumSeq);
    if (CntIndex <> -1) and not ObjBag.FlgTransfer and
       not (ObjBag.IdtTenderGroup in [CtIdtPochSuperKeys, CtIdtPochDrawerKeys,
                                      CtIdtPochGifts]) then begin
      ObjBag.FlgTransfer := True;
      ObjBag.CodDBState := CtCodDbsModify;
      ObjSafeTrans := LstSafeTransaction.SafeTransaction [CntIndex];
      NumSeqNew := NumSeqNew + 1;

      ObjSafeTransNew := LstSafeTrans.AddSafeTransaction
                                                 (IdtSafeTransNew,
                                                  NumSeqNew, CtCodSttFinalCount,
                                                  CtCodDbsNew);
      ObjSafeTransNew.StrLstExplanation.Add(CtTxtCountCoffre);
      ObjSafeTransIn := LstSafeTrans.AddSafeTransaction (IdtSafeTransIn, 0,
                                                         CtCodSttPayInTender,
                                                         CtCodDbsNew);
      ObjSafeTransIn.StrLstExplanation.Add(CtTxtCountCoffre);
      LstSafeTrans.CopySafeTransaction (ObjSafeTrans, ObjSafeTransNew);
      LstSafeTrans.CopySafeTransaction (ObjSafeTrans, ObjSafeTransIn);
      ObjSafeTransIn.CodReason := CtCodStrPayIn;
      CntLines := 0;
      for CntDetail := 0 to Pred (LstSafeTransaction.LstTransDetail.Count) do begin
        ObjTransDetail :=
                        LstSafeTransaction.LstTransDetail.TransDetail [CntDetail];
        if (ObjTransDetail.IdtSafeTransaction = ObjBag.IdtSafeTransaction)
           and (ObjTransDetail.NumSeq = ObjBag.NumSeq)
           and not ObjTransDetail.FlgTransfer
           and (ObjBag.IdtTenderGroup = ObjTransDetail.IdtTenderGroup) then begin
          ObjTransDetailNew :=
            LstSafeTrans.AddTransDetail (ObjSafeTransNew.IdtSafeTransaction,
                                         ObjSafeTransNew.NumSeq, 0,
                                         ObjTransDetail.IdtTenderGroup,
                                         CtCodDbsNew);
          ObjTransDetailIn :=
            LstSafeTrans.AddTransDetail (ObjSafeTransIn.IdtSafeTransaction,
                                         ObjSafeTransIn.NumSeq,
                                         0, ObjTransDetail.IdtTenderGroup,
                                         CtCodDbsNew);
          LstSafeTrans.LstTransDetail.CopyTransDetail (ObjTransDetail,
                                                       ObjTransDetailNew);
          LstSafeTrans.LstTransDetail.CopyTransDetail (ObjTransDetail,
                                                       ObjTransDetailIn);

          Inc (CntLines);
          ObjTransDetail.FlgTransfer := True;
          ObjTransDetail.CodDBState := CtCodDbsModify;
        end;
      end;
      if CntLines > 0 then begin
        ObjBagIn := LstSafeTrans.LstBag.AddBag
                      (ObjSafeTransIn.IdtSafeTransaction,
                       ObjSafeTransIn.NumSeq,
                       ObjBag.IdtTenderGroup,
                       CtCodDbsNew);
        ObjBagIn.IdtBag := ObjBag.IdtBag;
        ObjBagIn.IdtContainer := ObjBag.IdtContainer;
        ObjBag.FlgTransfer := True;
      end
      else begin
        LstSafeTrans.FreeSafeTransaction
          (LstSafeTrans.IndexOfIdtAndSeq (ObjSafeTransIn.IdtSafeTransaction,
                                          ObjSafeTransIn.NumSeq));
        LstSafeTrans.FreeSafeTransaction
          (LstSafeTrans.IndexOfIdtAndSeq (ObjSafeTransNew.IdtSafeTransaction,
                                          ObjSafeTransNew.NumSeq));
      end;
    end;
  end;
  ObjSafeTransIn := LstSafeTrans.AddSafeTransaction (IdtSafeTransIn,
                                                     0,
                                                     CtCodSttPayInTender,
                                                     CtCodDbsNew);
  ObjSafeTransIn.StrLstExplanation.Add(CtTxtCountCoffre);
  ObjSafeTransIn.CodReason := CtCodStrPayIn;
  ObjSafeTransIn.IdtCheckout := CtIdtSafe;
  ObjSafeTransIn.DatReg := Now;
  ObjSafeTransIn.IdtCurrency := DmdFpnUtils.IdtCurrencyMain;
  ObjSafetransIn.ValExchange := DmdFpnUtils.ValExchangeBase;
  ObjSafeTransIn.FlgExchMultiply := DmdFpnUtils.FlgExchMultiplyCurrencyMain;

  for CntItem := 0 to Pred (LstTenderGroup.Count) do begin
    ObjTenderGroup := LstTenderGroup.TenderGroup [CntItem];
    ValTotal := 0.0;
    if ObjTenderGroup.IdtTenderGroup = 1 then
      ValTotal := SvcLFValMoneyPresInvent.AsFloat +
                  SvcLFInitPayinInvent.AsFloat
    else begin
      for CntIndex := 0 to Pred (LstSafeTransaction.Count) do begin
        ObjSafeTrans := LstSafeTransaction.SafeTransaction [CntIndex];
        if LstBag.GetTenderBag (ObjSafeTrans.IdtSafeTransaction,
                                ObjSafeTrans.NumSeq,
                                ObjTenderGroup.IdtTenderGroup) = '' then begin
          LstSafeTransaction.TotalTransDetail (ObjSafeTrans.IdtSafeTransaction,
                                               ObjSafeTrans.NumSeq,
                                               ObjTenderGroup.IdtTenderGroup,
                                               False, QtyValue, ValAmount);
          ValTotal := ValTotal + ValAmount;
        end;
      end;
    end;
    NumSeqNew := NumSeqNew + 1;
    ObjSafeTransNew := LstSafeTrans.AddSafeTransaction (IdtSafeTransNew,
                                                        NumSeqNew,
                                                        CtCodSttFinalCount,
                                                        CtCodDbsNew);
    ObjSafeTransNew.StrLstExplanation.Add(CtTxtCountCoffre);
    ObjSafeTransNew.CodReason := CtCodStrCount;
    ObjSafeTransNew.IdtCheckout := CtIdtSafe;
    ObjSafeTransNew.DatReg := Now;
    ObjSafeTransNew.IdtCurrency := ObjTenderGroup.IdtCurrency;
    ObjSafeTransNew.ValExchange := ObjTenderGroup.ValExchange;
    ObjSafeTransNew.FlgExchMultiply := ObjTenderGroup.FlgExchMultiply;
    ObjTransDetailNew :=
      LstSafeTrans.AddTransDetail (ObjSafeTransNew.IdtSafeTransaction,
                                   ObjSafeTransNew.NumSeq, 0,
                                   ObjTenderGroup.IdtTenderGroup,
                                   CtCodDbsNew);
    ObjTransDetailNew.QtyUnit := 1;
    ObjTransDetailNew.ValUnit := ValTotal;

    if (ValTotal <> 0.0) and (ObjTenderGroup.CodTypePayOrgan = 1) then begin
      ObjSafeTransIn := LstSafeTrans.AddSafeTransaction (IdtSafeTransIn, 0,
                                                         CtCodSttPayInTender,
                                                         CtCodDbsNew);
      ObjSafeTransIn.StrLstExplanation.Add(CtTxtCountCoffre);
      ObjTransDetailIn :=
        LstSafeTrans.AddTransDetail (ObjSafeTransIn.IdtSafeTransaction,
                                     ObjSafeTransIn.NumSeq, 0,
                                     ObjTenderGroup.IdtTenderGroup,
                                     CtCodDbsNew);
      LstSafeTrans.CopySafeTransaction (ObjSafeTransNew, ObjSafeTransIn);
      LstSafeTrans.LstTransDetail.CopyTransDetail (ObjTransDetailNew,
                                                   ObjTransDetailIn);
    end;
  end;
  DmdFpnSafeTransaction.InsertLstSafeTransaction (LstSafeTrans);
  DmdFpnBagCA.UpdateLstBag (LstBag, ['FlgTransfer']);
  DmdFpnSafeTransaction.UpdateLstSafeTransaction (LstSafetransaction,[],['FlgTransfer']);
end;   // of TFrmTndRegCountSafeCA.BuildLstSafeTransaction

//=============================================================================

procedure TFrmTndRegCountSafeCA.BuildLstSafeTransactionCentral;
var
  CntItem          : Integer;         // Item counter
  CntDetail        : Integer;         // Detail counter
  LstSafeTrans     : TLstSafeTransactionCA; // Safe transaction
  ObjSafeTrans     : TObjSafeTransaction;
  ObjSafeTransNew  : TObjSafeTransaction;
  ObjSafeTransIn   : TObjSafeTransaction;
  ObjTransDetail   : TObjTransDetail;
  ObjTransDetailNew: TObjTransDetail;
  ObjTransDetailIn : TObjTransDetail;
  IdtSafeTransIn   : Integer;
  NumSeqNew         : Integer;
  IdtSafeTransNew  : Integer;
  CntIndex         : Integer;          // Index of transaction
  QtyValue         : Integer;          // The Quantity of a value
  ValAmount        : Currency;         // the amount of a value
  ValTotal         : Currency;
  ObjTenderGroup   : TObjTenderGroup;  // Tendergroup object
begin  // of TFrmTndRegCountSafeCA.BuildLstSafeTransactionCentral
  LstSafeTrans := TLstSafeTransactionCA.Create;
  repeat
    IdtSafeTransIn := DmdFpnUtils.GetNextCounter (CtTxtACSafeTransactionIdtAC,
                                                  CtTxtACSafeTransactionField);
  until not DmdFpnSafeTransactionCA.SafeTransactionExists(IntToStr(IdtSafeTransIn));
  IdtSafeTransNew := DmdFpnSafeTransactionCA
                           .RetrieveRunningSafeTransCashdesk (CtIdtChangeSafe);
  DmdFpnUtils.CloseInfo;
  NumSeqNew := 0;
  if IdtSafeTransNew > 0 then
    NumSeqNew := DmdFpnSafeTransactionCA.RetrieveMaxNumSeq (IdtSafeTransNew);
  for CntItem := 0 to Pred (LstSafeTrans.Count) do begin
    ObjSafeTrans := LstSafeTrans.SafeTransaction[CntItem];
    if (ObjSafeTrans.CodType = CtCodSttPayInTender) or
       (ObjSafeTrans.CodType = CtCodSttPayinCashDesk) or
       (ObjSafeTrans.CodType = CtCodSttPayInTransfer) then
      NumSeqNew := NumSeqNew + 1;
      ObjSafeTransNew := LstSafeTrans.AddSafeTransaction
                                                 (IdtSafeTransNew,
                                                  NumSeqNew, CtCodSttFinalCount,
                                                  CtCodDbsNew);
      ObjSafeTransNew.StrLstExplanation.Add(CtTxtCountCoffre);
      ObjSafeTransIn := LstSafeTrans.AddSafeTransaction (IdtSafeTransIn, 0,
                                                         CtCodSttPayInTender,
                                                         CtCodDbsNew);
      ObjSafeTransIn.StrLstExplanation.Add(CtTxtCountCoffre);
      LstSafeTrans.CopySafeTransaction (ObjSafeTrans, ObjSafeTransNew);
      LstSafeTrans.CopySafeTransaction (ObjSafeTrans, ObjSafeTransIn);
      ObjSafeTransIn.CodReason := CtCodStrPayIn;
      for CntDetail := 0 to Pred (LstSafeTransaction.LstTransDetail.Count) do begin
        ObjTransDetail :=
                        LstSafeTransaction.LstTransDetail.TransDetail [CntDetail];
        ObjTransDetailNew :=
          LstSafeTrans.AddTransDetail (ObjSafeTransNew.IdtSafeTransaction,
                                       ObjSafeTransNew.NumSeq, 0,
                                       ObjTransDetail.IdtTenderGroup,
                                       CtCodDbsNew);
        ObjTransDetailIn :=
          LstSafeTrans.AddTransDetail (ObjSafeTransIn.IdtSafeTransaction,
                                       ObjSafeTransIn.NumSeq,
                                       0, ObjTransDetail.IdtTenderGroup,
                                       CtCodDbsNew);
        LstSafeTrans.LstTransDetail.CopyTransDetail (ObjTransDetail,
                                                     ObjTransDetailNew);
        LstSafeTrans.LstTransDetail.CopyTransDetail (ObjTransDetail,
                                                     ObjTransDetailIn);
        ObjTransDetail.FlgTransfer := True;
      end;
      LstSafeTrans.FreeSafeTransaction
        (LstSafeTrans.IndexOfIdtAndSeq (ObjSafeTransIn.IdtSafeTransaction,
                                        ObjSafeTransIn.NumSeq));
      LstSafeTrans.FreeSafeTransaction
        (LstSafeTrans.IndexOfIdtAndSeq (ObjSafeTransNew.IdtSafeTransaction,
                                        ObjSafeTransNew.NumSeq));
  end;
  ObjSafeTransIn := LstSafeTrans.AddSafeTransaction (IdtSafeTransIn,
                                                     0,
                                                     CtCodSttPayInTender,
                                                     CtCodDbsNew);
  ObjSafeTransIn.StrLstExplanation.Add(CtTxtCountCoffre);                                                     
  ObjSafeTransIn.CodReason := CtCodStrPayIn;
  ObjSafeTransIn.IdtCheckout := CtIdtChangeSafe;
  ObjSafeTransIn.DatReg := Now;
  ObjSafeTransIn.IdtCurrency := DmdFpnUtils.IdtCurrencyMain;
  ObjSafetransIn.ValExchange := DmdFpnUtils.ValExchangeBase;
  ObjSafeTransIn.FlgExchMultiply := DmdFpnUtils.FlgExchMultiplyCurrencyMain;

  for CntItem := 0 to Pred (LstTenderGroup.Count) do begin
    ObjTenderGroup := LstTenderGroup.TenderGroup [CntItem];
    ValTotal := 0.0;
    if ObjTenderGroup.IdtTenderGroup = 1 then
      ValTotal := SvcLFMoneySafeInvent.AsFloat
    else begin
      for CntIndex := 0 to Pred (LstSafeTransaction.Count) do begin
        ObjSafeTrans := LstSafeTransaction.SafeTransaction [CntIndex];
        //if FMntTndCntSafeCA.FrmMntTndCntSafeCA.FlgLoginRequired = True then    // TCS Testing
           //ObjSafeTrans.IdtOperator := FMntTndCntSafeCA.FrmMntTndCntSafeCA.IdtOperator;
		       //showmessage('The line is commented');

        if LstBag.GetTenderBag (ObjSafeTrans.IdtSafeTransaction,
                                ObjSafeTrans.NumSeq,
                                ObjTenderGroup.IdtTenderGroup) = '' then begin
          LstSafeTransaction.TotalTransDetail (ObjSafeTrans.IdtSafeTransaction,
                                               ObjSafeTrans.NumSeq,
                                               ObjTenderGroup.IdtTenderGroup,
                                               False, QtyValue, ValAmount);
          ValTotal := ValTotal + ValAmount;
        end;
      end;
    end;
    NumSeqNew := NumSeqNew + 1;
    ObjSafeTransNew := LstSafeTrans.AddSafeTransaction (IdtSafeTransNew,
                                                        NumSeqNew,
                                                        CtCodSttFinalCount,
                                                        CtCodDbsNew);
    ObjSafeTransNew.StrLstExplanation.Add(CtTxtCountCoffre);
    ObjSafeTransNew.CodReason := CtCodStrCount;
    ObjSafeTransNew.IdtCheckout := CtIdtChangeSafe;
    ObjSafeTransNew.DatReg := Now;
    ObjSafeTransNew.IdtCurrency := ObjTenderGroup.IdtCurrency;
    ObjSafeTransNew.ValExchange := ObjTenderGroup.ValExchange;
    ObjSafeTransNew.FlgExchMultiply := ObjTenderGroup.FlgExchMultiply;
    ObjTransDetailNew :=
      LstSafeTrans.AddTransDetail (ObjSafeTransNew.IdtSafeTransaction,
                                   ObjSafeTransNew.NumSeq, 0,
                                   ObjTenderGroup.IdtTenderGroup,
                                   CtCodDbsNew);
    ObjTransDetailNew.QtyUnit := 1;
    ObjTransDetailNew.ValUnit := ValTotal;

    if ValTotal <> 0.0 then begin
      ObjSafeTransIn := LstSafeTrans.AddSafeTransaction (IdtSafeTransIn, 0,
                                                         CtCodSttPayInTender,
                                                         CtCodDbsNew);
      ObjSafeTransIn.StrLstExplanation.Add(CtTxtCountCoffre);
      ObjTransDetailIn :=
        LstSafeTrans.AddTransDetail (ObjSafeTransIn.IdtSafeTransaction,
                                     ObjSafeTransIn.NumSeq, 0,
                                     ObjTenderGroup.IdtTenderGroup,
                                     CtCodDbsNew);
      LstSafeTrans.CopySafeTransaction (ObjSafeTransNew, ObjSafeTransIn);
      LstSafeTrans.LstTransDetail.CopyTransDetail (ObjTransDetailNew,
                                                   ObjTransDetailIn);
    end;
  end;
  DmdFpnSafeTransaction.InsertLstSafeTransaction (LstSafeTrans);
  DmdFpnBagCA.UpdateLstBag (LstBag, ['FlgTransfer']);
end;   // of TFrmTndRegCountSafeCA.BuildLstSafeTransactionCentral

//=============================================================================

procedure TFrmTndRegCountSafeCA.AddDetailCount
                                          (LstSafeTrans : TLstSafeTransactionCA;
                                           ObjSafeTrans : TObjSafeTransaction);
var
  ObjTransDet      : TObjTransDetail;  // Object to add
  ObjTenderGroup   : TObjTenderGroup;  //
begin  // of TFrmTndRegCountSafeCA.AddDetailCount
  ObjTenderGroup := LstTenderGroup.FindIdtTenderGroup (IdtTGMoneyCoup);
  ObjTransDet := LstSafeTrans.LstTransDetail.AddTransDetail
                              (ObjSafetrans.IdtSafeTransaction,
                               ObjSafetrans.NumSeq, 0,
                               ObjTenderGroup.IdtTenderGroup,
                               CtCodDbsNew);
  ObjTransDet.TxtDescr := ObjTenderGroup.TxtPublDescr;
  ObjTransDet.IdtCurrency := ObjTenderGroup.IdtCurrency;
  ObjTransDet.QtyUnit := 1;
  ObjTransDet.ValUnit := SvcLFValMoneyPresInvent.AsFloat;
  ObjTransDet.ValExchange := ObjTenderGroup.ValExchange;
  ObjTransDet.FlgExchMultiply := ObjTenderGroup.FlgExchMultiply;
end;   // of TFrmTndRegCountSafeCA.AddDetailCount

//=============================================================================

procedure TFrmTndRegCountSafeCA.BtnPrintClick(Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.BtnPrintClick
  inherited;
  BuildLstCntSafe;
  try
    SvcTaskMgr.LaunchTask ('PrintReport');
  finally
    ModalResult := mrOK;
  end;
end;   // of TFrmTndRegCountSafeCA.BtnPrintClick

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFValMoneyPresTheorChange(
  Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFValMoneyPresTheorChange
  inherited;
end;   // of TFrmTndRegCountSafeCA.SvcLFValMoneyPresTheorChange

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFKeyDoubleDrawerInventExit(
  Sender: TObject);

begin  // of TFrmTndRegCountSafeCA.SvcLFKeyDoubleDrawerInventExit
  inherited;
  if (length( Trim (SvcLFKeyDoubleDrawerInvent.Text)) <> 13) and
     (length( Trim (SvcLFKeyDoubleDrawerInvent.Text)) <> 0) then begin
    SvcLFKeyDoubleDrawerInvent.Text := '';;
    SvcLFKeyDoubleDrawerInvent.SetFocus;
    MessageDlg (CtTxtBagInvalidLength, mtWarning, [mbOk],0);
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFKeyDoubleDrawerInventExit

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFKeySupervisorInventExit(
  Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFKeySupervisorInventExit
  inherited;
  if (length( Trim (SvcLFKeySupervisorInvent.Text)) <> 13) and
     (length( Trim (SvcLFKeySupervisorInvent.Text)) <> 0) then begin
    SvcLFKeySupervisorInvent.Text := '';;
    SvcLFKeySupervisorInvent.SetFocus;
    MessageDlg (CtTxtBagInvalidLength, mtWarning, [mbOk],0);
    Exit;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFKeySupervisorInventExit

//=============================================================================

procedure TFrmTndRegCountSafeCA.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin  // of TFrmTndRegCountSafeCA.FormCloseQuery
  inherited;
  GiftCouponsList.Free;
  GiftCouponsList := nil;
end;   // of TFrmTndRegCountSafeCA.FormCloseQuery

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFValMoneyPresInventExit(
  Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFValMoneyPresInventExit
  inherited;
  if StrToFloat(SvcLFValMoneyPresInvent.Text) < 0 then begin
    ShowMessage(CtTxtErrNegativeNotAllowed);
    SvcLFValMoneyPresInvent.SetFocus;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFValMoneyPresInventExit

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFInitPayinInventExit(Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFInitPayinInventExit
  inherited;
  if StrToFloat(SvcLFInitPayinInvent.Text) < 0 then begin
    ShowMessage(CtTxtErrNegativeNotAllowed);
    SvcLFInitPayinInvent.SetFocus;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFInitPayinInventExit

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFMoneySafeInventExit(Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFMoneySafeInventExit
  inherited;
  if StrToFloat(SvcLFMoneySafeInvent.Text) < 0 then begin
    ShowMessage(CtTxtErrNegativeNotAllowed);
    SvcLFMoneySafeInvent.SetFocus;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFMoneySafeInventExit

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcLFTotMoneySafeInventExit(
  Sender: TObject);
begin  // of TFrmTndRegCountSafeCA.SvcLFTotMoneySafeInventExit
  inherited;
  if StrToFloat(SvcLFTotMoneySafeInvent.Text) < 0 then begin
    ShowMessage(CtTxtErrNegativeNotAllowed);
    SvcLFTotMoneySafeInvent.SetFocus;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcLFTotMoneySafeInventExit

//=============================================================================

procedure TFrmTndRegCountSafeCA.SvcMEKeyDown (    Sender : TObject;
                                              var Key    : Word;
                                                  Shift  : TShiftState);
begin  // of TFrmTndRegCountSafeCA.SvcMEKeyDown
  if (Shift = []) and (Key in [VK_RETURN]) then begin
    PostMessage (TWinControl(Sender).Handle, WM_KeyDown, VK_TAB, 0);
    Key := 0;
  end;
end;   // of TFrmTndRegCountSafeCA.SvcMEKeyDown

//=============================================================================

initialization
  // Add module to list for version control
  SfDialog.AddPVCSSourceIdent (CtTxtModuleName, CtTxtSrcName,
                               CtTxtSrcVersion, CtTxtSrcDate);
end.  // of FTndRegCountSafeCA
